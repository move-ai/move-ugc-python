{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting started","text":""},{"location":"#overview","title":"Overview","text":"<p>Move's UGC API enables businesses and groups to construct tailored workflows or applications, addressing their unique requirements for mocap animation. While our core API is built on GraphQL, this SDK provides a simple interface for interacting with the API and can be integrated into any python application.</p>"},{"location":"#installation","title":"Installation","text":""},{"location":"#with-pip","title":"With pip:","text":"<pre><code>pip install move-ugc-python\n</code></pre>"},{"location":"#with-poetry","title":"With poetry:","text":"<pre><code>poetry add move-ugc-python\n</code></pre>"},{"location":"#creating-a-file","title":"Creating a file","text":"<pre><code>from move_ugc import MoveUgc\nugc = MoveUgc(api_key=\"YOUR_API_KEY\")\nvideo_file = ugc.files.create(file_type=\"mp4\")\ndepth_file = ugc.files.create(file_type=\"move\")\n</code></pre> <p>This will return a presigned URL that you can use to upload your video file to our servers. Please refer to this snippet for a guide on how to upload a file to a presigned URL.</p>"},{"location":"contributing/","title":"Contribution guide","text":""},{"location":"contributing/#local-development","title":"Local development","text":"<ul> <li>The complete test suite depends on having at least the following installed   (possibly not a complete list)</li> <li>git </li> <li>python3 (at least 3.8)</li> <li>poetry</li> </ul>"},{"location":"contributing/#instruction-for-creating-a-commit","title":"Instruction for creating a commit","text":"<ol> <li>Clone the repository from your GitHub.</li> <li>Setup development environment through poetry (<code>poetry install</code>).</li> <li>Setup pre-commit hook (<code>poetry run pre-commit install</code>)</li> </ol>"},{"location":"contributing/#creating-releases","title":"Creating releases","text":"<p>The project uses commitizen for creating releases. The commitizen uses conventional commits to release new versions automatically.</p> <ul> <li>Commits of type <code>fix</code> will trigger bugfix releases, think <code>0.0.1</code> e.g. <code>fix: fix schema</code></li> <li>Commits of type <code>feat</code> will trigger feature releases, think <code>0.1.0</code> e.g. <code>feat: introduce new schema</code></li> <li>Commits with <code>BREAKING CHANGE</code> in body or footer will trigger breaking releases, think <code>1.0.0</code> <code>BREAKING CHANGE: introduce V2</code></li> </ul> <p>All other commit types will trigger no new release.</p> <p>More info for commitizen </p>"},{"location":"api-reference/schemas/client/","title":"Client","text":""},{"location":"api-reference/schemas/client/#move_ugc.schemas.client.Client","title":"Client","text":"<p>Client representation in pydantic schema.</p>"},{"location":"api-reference/schemas/client/#move_ugc.schemas.client.Client.id","title":"id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>id: str = Field(description='Unique identifier for the client', examples=['client-2c6059be-0f91-4cb8-aa1a-512cd10a66b5'], title='Client ID')\n</code></pre>"},{"location":"api-reference/schemas/client/#move_ugc.schemas.client.Client.created","title":"created  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created: datetime = Field(description='Date and time when the file was created. This will be in UTC.', examples=['2021-08-04T15:00:00.000Z'], title='Client creation date')\n</code></pre>"},{"location":"api-reference/schemas/client/#move_ugc.schemas.client.Client.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str = Field(description='Client name associated at the time of creation', examples=['MyAwesomeCompany'], title='Client name')\n</code></pre>"},{"location":"api-reference/schemas/file/","title":"File","text":""},{"location":"api-reference/schemas/file/#move_ugc.schemas.file.FileType","title":"FileType","text":"<p>Representation for File type in MoveUGC.</p>"},{"location":"api-reference/schemas/file/#move_ugc.schemas.file.FileType.id","title":"id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>id: str = Field(description='Unique identifier for the file', examples=['file-2c6059be-0f91-4cb8-aa1a-512cd10a66b5'], title='File ID')\n</code></pre>"},{"location":"api-reference/schemas/file/#move_ugc.schemas.file.FileType.created","title":"created  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created: datetime = Field(description='Date and time when the file was created. This will be in UTC.', examples=['2021-08-04T15:00:00.000Z'], title='File creation date')\n</code></pre>"},{"location":"api-reference/schemas/file/#move_ugc.schemas.file.FileType.type","title":"type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type: str = Field(description='Type of the file', examples=['mp4', 'avi', 'mov'], title='File type')\n</code></pre>"},{"location":"api-reference/schemas/file/#move_ugc.schemas.file.FileType.presigned_url","title":"presigned_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>presigned_url: HttpUrl = Field(description='Presigned URL for the file', examples=['https://s3.amazonaws.com/bucket/file.mp4?AWSAccessKeyId=123&amp;Expires=123&amp;Signature=123'], title='File presigned URL', alias='presignedUrl')\n</code></pre>"},{"location":"api-reference/schemas/file/#move_ugc.schemas.file.FileType.client","title":"client  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>client: Optional[Client] = Field(description='Client associated with the file', examples=[{'id': 'client-2c6059be-0f91-4cb8-aa1a-512cd10a66b5'}], title='File client', default=None)\n</code></pre>"},{"location":"api-reference/schemas/file/#move_ugc.schemas.file.FileType.metadata","title":"metadata  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>metadata: Json[Any] = Field(description='Metadata associated with the file', examples=[{'key': 'value'}], title='File metadata')\n</code></pre>"},{"location":"api-reference/schemas/job/","title":"Job","text":""},{"location":"api-reference/schemas/job/#move_ugc.schemas.job.JobType","title":"JobType","text":"<p>Representation for Job type in MoveUGC.</p>"},{"location":"api-reference/schemas/job/#move_ugc.schemas.job.JobType.id","title":"id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>id: str = Field(description='Unique identifier for the job', examples=['job-2c6059be-0f91-4cb8-aa1a-512cd10a66b5'], title='Job ID')\n</code></pre>"},{"location":"api-reference/schemas/job/#move_ugc.schemas.job.JobType.created","title":"created  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created: datetime = Field(description='Date and time when the job was created. This will be in UTC.', examples=['2021-08-04T15:00:00.000Z'], title='Job creation date')\n</code></pre>"},{"location":"api-reference/schemas/job/#move_ugc.schemas.job.JobType.metadata","title":"metadata  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>metadata: Json[Dict[str, str]] = Field(description='Metadata associated with the job', examples=[{'key': 'value'}], title='Job metadata')\n</code></pre>"},{"location":"api-reference/schemas/job/#move_ugc.schemas.job.JobType.client","title":"client  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>client: Optional[Client] = Field(description='Client associated with the job', examples=[{'id': 'client-ff07d226-4ecb-49b4-8aed-0bd35cd50eeb'}], title='Job client', default=None)\n</code></pre>"},{"location":"api-reference/schemas/job/#move_ugc.schemas.job.JobType.outputs","title":"outputs  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>outputs: Optional[List[AdditionalFileType]] = Field(description='Outputs for the job. This usually contains the fbx, mp4 output files when the state is `FINISHED`', examples=[{'key': 'fbx', 'file': {'id': 'file-ee02c1b6-0328-4a7c-a2b2-76883acb451d'}}], title='Job outputs', default=None)\n</code></pre>"},{"location":"api-reference/schemas/job/#move_ugc.schemas.job.JobType.state","title":"state  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>state: str = Field(description='State of the job', examples=['FINISHED', 'NOT STARTED', 'RUNNING', 'FAILED'], title='Job state')\n</code></pre>"},{"location":"api-reference/schemas/job/#move_ugc.schemas.job.JobType.take","title":"take  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>take: Optional[TakeType] = Field(description='Take associated with the job', examples=[{'id': 'take-4003a524-7819-4537-ac82-8a3ac2635db9'}], title='Job take', default=None)\n</code></pre>"},{"location":"api-reference/schemas/take/","title":"Take","text":""},{"location":"api-reference/schemas/take/#move_ugc.schemas.take.TakeType","title":"TakeType","text":"<p>Representation for Take type in MoveUGC.</p>"},{"location":"api-reference/schemas/take/#move_ugc.schemas.take.TakeType.id","title":"id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>id: str = Field(description='Unique identifier for the take', examples=['take-2c6059be-0f91-4cb8-aa1a-512cd10a66b5'], title='Take ID')\n</code></pre>"},{"location":"api-reference/schemas/take/#move_ugc.schemas.take.TakeType.created","title":"created  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created: datetime = Field(description='Date and time when the take was created. This will be in UTC.', examples=['2021-08-04T15:00:00.000Z'], title='Take creation date')\n</code></pre>"},{"location":"api-reference/schemas/take/#move_ugc.schemas.take.TakeType.metadata","title":"metadata  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>metadata: Json[Any] = Field(description='Metadata associated with the take', examples=[{'key': 'value'}], title='Take metadata')\n</code></pre>"},{"location":"api-reference/schemas/take/#move_ugc.schemas.take.TakeType.client","title":"client  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>client: Optional[Client] = Field(description='Client associated with the take', examples=[{'id': 'client-0aa9ba14-44f9-4d47-89b4-c77cdea9e801'}], title='Take client', default=None)\n</code></pre>"},{"location":"api-reference/schemas/take/#move_ugc.schemas.take.TakeType.video_file","title":"video_file  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>video_file: Optional[FileType] = Field(description='Video file associated with the take', examples=[{'id': 'file-1fd863d5-875b-4e48-89bb-c6234e804738'}], title='Take video file', alias='videoFile', default=None)\n</code></pre>"},{"location":"api-reference/schemas/take/#move_ugc.schemas.take.TakeType.additional_files","title":"additional_files  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>additional_files: Optional[List[AdditionalFileType]] = Field(description='Optional additional files for the take', examples=[{'key': 'depth', 'file': {'id': 'file-ee02c1b6-0328-4a7c-a2b2-76883acb451d'}}], title='Take additional files', alias='additionalFiles', default=None)\n</code></pre>"},{"location":"api-reference/services/client/","title":"Client","text":""},{"location":"api-reference/services/client/#move_ugc.services.client.ClientService","title":"ClientService","text":"<p>Service which can be used to communicate with Client type in UGC API.</p> <p>To use this service, you need to instantiate it with a valid Move UGC client.</p> <pre><code>from move_ugc import MoveUgc\nugc = MoveUgc(api_key=\"my-api-key\")\n\n# Call client service methods directly\nugc.clients.retrieve(id=\"client-&lt;guid&gt;\")\n\n# Or use the client service as a mixin\nclient_service = ugc.clients\nclient_service.retrieve(id=\"client-&lt;guid&gt;\")\n</code></pre>"},{"location":"api-reference/services/client/#move_ugc.services.client.ClientService.retrieve","title":"retrieve","text":"<pre><code>retrieve() -&gt; Client\n</code></pre> <p>Retrieve a client with given client_id from MoveUGC.</p> <p>Returns:</p> Type Description <code>Client</code> <p>Client instance of Pydantic model type.</p>"},{"location":"api-reference/services/client/#move_ugc.services.client.ClientService.update","title":"update","text":"<pre><code>update(metadata: Dict[str, Any]) -&gt; Client\n</code></pre> <p>Update a client with given client_id from MoveUGC.</p> <p>Parameters:</p> Name Type Description Default <code>metadata</code> <code>Dict[str, Any]</code> <p>metadata to be updated.</p> required <p>Returns:</p> Type Description <code>Client</code> <p>Client instance of Pydantic model type.</p>"},{"location":"api-reference/services/file/","title":"Files","text":""},{"location":"api-reference/services/file/#move_ugc.services.file.FileService","title":"FileService","text":"<p>Service which can be used to communicate with File type in UGC API.</p> <p>To use this service, you need to instantiate it with a valid Move UGC client.</p> <pre><code>from move_ugc import MoveUgc\nugc = MoveUgc(api_key=\"my-api-key\")\n\n# Call file service methods directly\nugc.files.retrieve(id=\"file-&lt;guid&gt;\")\n\n# Or use the file service as a mixin\nfile_service = ugc.files\nfile_service.retrieve(id=\"file-&lt;guid&gt;\")\n</code></pre>"},{"location":"api-reference/services/file/#move_ugc.services.file.FileService.create","title":"create","text":"<pre><code>create(file_type: str, metadata: Optional[Dict[str, Any]] = None, expand: Optional[List[ALLOWED_EXPAND_ATTRS]] = None) -&gt; FileType\n</code></pre> <p>Create a file with given file type in MoveUGC.</p> <p>Parameters:</p> Name Type Description Default <code>file_type</code> <code>str</code> <p>type of file to be created. Example: <code>mp4</code>, <code>avi</code>, <code>move</code> etc.</p> required <code>expand</code> <code>Optional[List[ALLOWED_EXPAND_ATTRS]]</code> <p>list of fields to be expanded. Currently only <code>client</code> is supported.</p> <code>None</code> <code>metadata</code> <code>Optional[Dict[str, Any]]</code> <p>metadata to be associated with the file.</p> <code>None</code> <p>Returns:</p> Type Description <code>FileType</code> <p>File instance of Pydantic model type.</p>"},{"location":"api-reference/services/file/#move_ugc.services.file.FileService.retrieve","title":"retrieve","text":"<pre><code>retrieve(id: str, expand: Optional[List[ALLOWED_EXPAND_ATTRS]] = None) -&gt; FileType\n</code></pre> <p>Retrieve a file with given file_id from MoveUGC.</p> <p>The unique id for file will usually be in the format: <code>file-{uuid}</code></p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>unique identifier for the file. This should typically be something like <code>file-{uuid}</code>.</p> required <code>expand</code> <code>Optional[List[ALLOWED_EXPAND_ATTRS]]</code> <p>list of fields to be expanded. Currently only <code>client</code> is supported.</p> <code>None</code> <p>Returns:</p> Type Description <code>FileType</code> <p>File instance of Pydantic model type.</p>"},{"location":"api-reference/services/file/#move_ugc.services.file.FileService.update","title":"update","text":"<pre><code>update(id: str, metadata: Optional[Dict[str, Any]] = None, expand: Optional[List[ALLOWED_EXPAND_ATTRS]] = None) -&gt; FileType\n</code></pre> <p>Update a file with given id in MoveUGC.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>unique identifier for the file. This should typically be something like <code>file-{uuid}</code>.</p> required <code>expand</code> <code>Optional[List[ALLOWED_EXPAND_ATTRS]]</code> <p>list of fields to be expanded. Currently only <code>client</code> is supported.</p> <code>None</code> <code>metadata</code> <code>Optional[Dict[str, Any]]</code> <p>metadata to be associated with the file.</p> <code>None</code> <p>Returns:</p> Type Description <code>FileType</code> <p>File instance of Pydantic model type.</p>"},{"location":"api-reference/services/job/","title":"Jobs","text":""},{"location":"api-reference/services/job/#move_ugc.services.job.JobService","title":"JobService","text":"<p>Service which can be used to communicate with Job type in UGC API.</p> <p>To use this service, you need to instantiate it with a valid Move UGC client.</p> <pre><code>from move_ugc import MoveUgc\nugc = MoveUgc(api_key=\"my-api-key\")\n\n# Call job service methods directly\nugc.jobs.retrieve(id=\"job-&lt;guid&gt;\")\n\n# Or use the job service as a mixin\njob_service = ugc.jobs\njob_service.retrieve(id=\"job-&lt;guid&gt;\")\n</code></pre>"},{"location":"api-reference/services/job/#move_ugc.services.job.JobService.create","title":"create","text":"<pre><code>create(take_id: str, metadata: Optional[str] = None, expand: Optional[List[ALLOWED_EXPAND_ATTRS]] = None) -&gt; JobType\n</code></pre> <p>Create a job in MoveUGC.</p> <p>Parameters:</p> Name Type Description Default <code>take_id</code> <code>str</code> <p>id of the take to be used for creating the job.</p> required <code>metadata</code> <code>Optional[str]</code> <p>metadata to be used for creating the job. This should be a valid json string.</p> <code>None</code> <code>expand</code> <code>Optional[List[ALLOWED_EXPAND_ATTRS]]</code> <p>list of fields to be expanded. Currently only <code>client</code>, <code>take</code> and <code>outputs</code> are supported.</p> <code>None</code> <p>Returns:</p> Type Description <code>JobType</code> <p>Job instance of Pydantic model type.</p>"},{"location":"api-reference/services/job/#move_ugc.services.job.JobService.retrieve","title":"retrieve","text":"<pre><code>retrieve(id: str, expand: Optional[List[ALLOWED_EXPAND_ATTRS]] = None) -&gt; JobType\n</code></pre> <p>Retrieve a job from MoveUGC.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>id of the job to be retrieved.</p> required <code>expand</code> <code>Optional[List[ALLOWED_EXPAND_ATTRS]]</code> <p>list of fields to be expanded. Currently only <code>client</code>, <code>take</code> and <code>outputs</code> are supported.</p> <code>None</code> <p>Returns:</p> Type Description <code>JobType</code> <p>Job instance of Pydantic model type.</p>"},{"location":"api-reference/services/take/","title":"Takes","text":""},{"location":"api-reference/services/take/#move_ugc.services.take.TakeService","title":"TakeService","text":"<p>Service which can be used to communicate with Take type in UGC API.</p> <p>To use this service, you need to instantiate it with a valid Move UGC client.</p> <pre><code>from move_ugc import MoveUgc\nugc = MoveUgc(api_key=\"my-api-key\")\n\n# Call take service methods directly\nugc.takes.retrieve(id=\"take-&lt;guid&gt;\")\n\n# Or use the take service as a mixin\ntake_service = ugc.takes\ntake_service.retrieve(id=\"take-&lt;guid&gt;\")\n</code></pre>"},{"location":"api-reference/services/take/#move_ugc.services.take.TakeService.create","title":"create","text":"<pre><code>create(video_file_id: str, additional_files: Optional[List[AdditionalFileIn]] = None, metadata: Optional[Dict[str, Any]] = None, expand: Optional[List[ALLOWED_EXPAND_ATTRS]] = None) -&gt; TakeType\n</code></pre> <p>Create a file with given file type in MoveUGC.</p> <p>Parameters:</p> Name Type Description Default <code>video_file_id</code> <code>str</code> <p>id of the video file to be used for creating the take. This usually contains a video file with extensions such as <code>mp4</code>, <code>avi</code>, <code>mov</code> etc.</p> required <code>metadata</code> <code>Optional[Dict[str, Any]]</code> <p>metadata to be used for creating the take. This should be a valid json string.</p> <code>None</code> <code>additional_files</code> <code>Optional[List[AdditionalFileIn]]</code> <p>list of additional files to be used for creating the take.</p> <code>None</code> <code>expand</code> <code>Optional[List[ALLOWED_EXPAND_ATTRS]]</code> <p>list of fields to be expanded. Currently only <code>client</code>, <code>video_file</code> and <code>additional_files</code> are supported.</p> <code>None</code> <p>Returns:</p> Type Description <code>TakeType</code> <p>File instance of Pydantic model type.</p>"},{"location":"api-reference/services/take/#move_ugc.services.take.TakeService.retrieve","title":"retrieve","text":"<pre><code>retrieve(id: str, expand: Optional[List[ALLOWED_EXPAND_ATTRS]] = None) -&gt; TakeType\n</code></pre> <p>Retrieve a take with given take_id from MoveUGC.</p> <p>The unique id for take will usually be in the format: <code>take-{uuid}</code></p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>unique identifier for the take. This should typically be something like <code>take-{uuid}</code>.</p> required <code>expand</code> <code>Optional[List[ALLOWED_EXPAND_ATTRS]]</code> <p>list of fields to be expanded. Currently only <code>client</code>, <code>video_file</code> and <code>additional_files</code> are supported.</p> <code>None</code> <p>Returns:</p> Type Description <code>TakeType</code> <p>Take instance of Pydantic model type.</p>"},{"location":"getting-started/usage/client/","title":"Client","text":"<p>A client object represents your client in MoveUGC. It is the main resource in the SDK. It is the client that is associated to your api-key and may contain any metadata you would want to associated to it.</p> <p>\ud83d\udca1 You don't need to specify the client id when retrieving or updating your client object. </p>"},{"location":"getting-started/usage/client/#retrieving-a-client","title":"Retrieving a client","text":"<p>To fetch your client from MoveUGC you can use the <code>ugc.client.retrieve</code> method:</p> <pre><code>client = ugc.client.retrieve()\n</code></pre>"},{"location":"getting-started/usage/client/#updating-your-client-with-metadata","title":"Updating your client with metadata","text":"<p>To update your client with metadata, you can use the <code>ugc.client.update</code> method:</p> <pre><code>import json\nmetadata = {\"foo\": \"bar\"}\nclient = ugc.client.update(metadata=metadata)\n</code></pre> <p>For more information on the client object, see the API reference.</p>"},{"location":"getting-started/usage/file/","title":"Files","text":"<p>Files are the main resource in the SDK. They are the files that you want to associate to a take and eventually generate animations from.</p>"},{"location":"getting-started/usage/file/#creating-a-file","title":"Creating a file","text":"<p>To create a file, you need to specify the type of file you want to create:</p> <p>Sample: Creating an <code>mp4</code> file.</p> <pre><code>import json\n\n# Create a file without metadata\nfile = ugc.files.create(file_type=\"mp4\")\n\n# Create a file with metadata\nfile_metadata = {\"foo\": \"bar\"}\nfile = ugc.files.create(file_type=\"mp4\", metadata=file_metadata)\n\n# Create a file and fetch the client data in the same request\nfile = ugc.files.create(file_type=\"mp4\", expand=[\"client\"])\n</code></pre> <p>This will return a pydantic object with the fields mentioned here.</p> <p>\ud83d\udca1 You can fetch the client in the same request by passing <code>expand=[\"client\"]</code> to either <code>ugc.files.create</code> or <code>ugc.files.retrieve</code>.</p>"},{"location":"getting-started/usage/file/#retrieving-an-existing-file","title":"Retrieving an existing file","text":"<p>To fetch an existing file from MoveUGC you can use the <code>ugc.files.retrieve</code> method:</p> <pre><code># Retrieve a file on its own\nfile = ugc.files.retrieve(id=\"file-123-123-123-123\")\n\n# Retrieve a file and fetch the client data in the same request\nfile = ugc.files.retrieve(id=\"file-123-123-123-123\", expand=[\"client\"])\n</code></pre>"},{"location":"getting-started/usage/file/#updating-an-existing-file-with-metadata","title":"Updating an existing file with metadata","text":"<p>To update an existing file with metadata, you can use the <code>ugc.files.update</code> method:</p> <pre><code>import json\n\n# Update a file with metadata\nfile_metadata = {\"foo\": \"bar\"}\nfile = ugc.files.update(id=\"file-123-123-123-123\", metadata=json.dumps(file_metadata))\n\n# Update a file and fetch the client data in the same request\nfile = ugc.files.update(\n    id=\"file-123-123-123-123\", metadata=file_metadata, expand=[\"client\"],\n)\n</code></pre> <p>For more information on the file object, see the API reference.</p>"},{"location":"getting-started/usage/job/","title":"Jobs","text":"<p>Jobs are the processing entity in MoveUGC. By creating a Job, you can initiate the processing for a take. A job can have multiple output types, currently the only output types supported are <code>mp4</code> and <code>fbx</code> files.</p>"},{"location":"getting-started/usage/job/#prerequisites","title":"Prerequisites","text":"<p>Before creating a job, please make sure that a take is created. If you've not created a take please refer to this usage guide.</p>"},{"location":"getting-started/usage/job/#creating-a-job","title":"Creating a job","text":"<pre><code>job = ugc.jobs.create(take_id=\"take-2be2463e-ffa3-419b-beb4-ea0f99c79512\")\n</code></pre>"},{"location":"getting-started/usage/job/#attaching-some-custom-metadata-with-your-job","title":"Attaching some custom metadata with your job","text":"<p>The metadata attribute in job type accepts any valid json string and can contain any custom data. This is particularly useful if any business logic needs to be implemented such as attaching a user id to a job.</p> <pre><code>job = ugc.jobs.create(\n    take_id=\"take-2be2463e-ffa3-419b-beb4-ea0f99c79512\",\n    metadata=json.dumps({\"foo\": \"bar\"}),\n)\n</code></pre>"},{"location":"getting-started/usage/job/#retrieving-a-job","title":"Retrieving a job","text":"<pre><code>job = ugc.jobs.retrieve(id=\"job-2be2463e-ffa3-419b-beb4-ea0f99c79512\")\n</code></pre>"},{"location":"getting-started/usage/job/#retrieving-a-job-with-its-nested-resources","title":"Retrieving a job with its nested resources","text":"<pre><code>job = ugc.jobs.retrieve(\n    id=\"job-2be2463e-ffa3-419b-beb4-ea0f99c79512\", expand=[\"take\", \"outputs\", \"client\"]\n)\n</code></pre> <p>\ud83d\udca1 <code>expand</code> supports only <code>take</code>, <code>outputs</code> and <code>client</code> as of now.</p> <p>For more information on the job object, see the API reference.</p>"},{"location":"getting-started/usage/take/","title":"Takes","text":"<p>Takes are a way to define a recording session. A single take can be associated with a video file and optionally additional files.</p> <p>\ud83d\udca1 Additional files is a planned feature which is not supported right now, the plan is to support additional file types: DEPTH, INTRINSIC, ODOMETRY, VISION, MOVE Currently only MOVE files are supported as part of additional files which should contain a <code>.move</code> file.</p>"},{"location":"getting-started/usage/take/#prequisites","title":"Prequisites","text":"<p>As a minimum requirement to create a take you need to have a video file and a move file. You can create a video file by following the usage guide.</p>"},{"location":"getting-started/usage/take/#creating-a-take","title":"Creating a take","text":"<p>To create a take you need at least a video file with optional additional file types mentioned above.</p>"},{"location":"getting-started/usage/take/#create-a-take-with-only-a-rgb-video-file-planned","title":"Create a take with only a RGB video file (planned)","text":"<p>\ud83d\udca1 This is a planned feature and does not work right now.</p> <pre><code>take = ugc.takes.create(video_file_id=\"file-457e23c2-6afc-4913-91f6-36522245d57d\")\n</code></pre>"},{"location":"getting-started/usage/take/#create-a-take-with-additional-files","title":"Create a take with additional files","text":"<pre><code>from move_ugc.schemas.additional_file import AdditionalFileIn, TakeAdditionalFileKeys\ntake = ugc.takes.create(\n    video_file_id=\"file-457e23c2-6afc-4913-91f6-36522245d57d\",\n    additional_files=[\n        AdditionalFileIn(\n            key=TakeAdditionalFileKeys.move,\n            file_id=\"file-ee02c1b6-0328-4a7c-a2b2-76883acb451d\",\n        )\n    ]\n)\n</code></pre>"},{"location":"getting-started/usage/take/#attaching-some-custom-metadata-with-your-take","title":"Attaching some custom metadata with your take","text":"<p>The metadata attribute in take type accepts any valid json string and can contain any custom data. This is particularly useful if any business logic needs to be implemented such as attaching a user id to a take.</p> <pre><code>import json\ntake = ugc.takes.create(\n    video_file_id=\"file-457e23c2-6afc-4913-91f6-36522245d57d\",\n    metadata={\"foo\": \"bar\"},\n)\n</code></pre>"},{"location":"getting-started/usage/take/#querying-for-a-take","title":"Querying for a take","text":"<pre><code>take = ugc.takes.retrieve(id=\"take-2be2463e-ffa3-419b-beb4-ea0f99c79512\")\n</code></pre>"},{"location":"getting-started/usage/take/#fetching-associated-types-with-a-take","title":"Fetching associated types with a take","text":"<pre><code>take = ugc.takes.retrieve(id=\"take-2be2463e-ffa3-419b-beb4-ea0f99c79512\", expand=[\"video_file\"])\n</code></pre> <p>\ud83d\udca1 Currently supported attributes for expand are <code>client</code>, <code>video_file</code> and <code>additional_files</code> Please note that expand feature can only be used to fetch types which are 1 level deep i.e. you cannot perform an expansion of <code>video_file.client</code>. To fetch a client associated with a video_file you need to perform a separate request.</p>"},{"location":"getting-started/usage/take/#updating-a-take","title":"Updating a take","text":"<p>To update a take you can use the <code>ugc.takes.update</code> method:</p> <pre><code>take = ugc.takes.update(\n    id=\"take-2be2463e-ffa3-419b-beb4-ea0f99c79512\",\n    metadata={\"foo\": \"bar\"},\n)\n</code></pre> <p>For more information on the take object, see the API reference.</p>"}]}