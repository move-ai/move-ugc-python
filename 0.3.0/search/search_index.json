{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting started","text":""},{"location":"#overview","title":"Overview","text":"<p>Move's UGC API enables businesses and groups to construct tailored workflows or applications, addressing their unique requirements for mocap animation. While our core API is built on GraphQL, this SDK provides a simple interface for interacting with the API and can be integrated into any python application.</p>"},{"location":"#installation","title":"Installation","text":""},{"location":"#with-pip","title":"With pip:","text":"<pre><code>pip install move-ugc\n</code></pre>"},{"location":"#with-poetry","title":"With poetry:","text":"<pre><code>poetry add move-ugc\n</code></pre>"},{"location":"#creating-a-file","title":"Creating a file","text":"<pre><code>from move_ugc import MoveUgc\nugc = MoveUgc(api_key=\"YOUR_API_KEY\")\nvideo_file = ugc.files.create(file_type=\"mp4\")\ndepth_file = ugc.files.create(file_type=\"move\")\n</code></pre> <p>This will return a presigned URL that you can use to upload your video file to our servers. Please refer to this snippet for a guide on how to upload a file to a presigned URL.</p>"},{"location":"contributing/","title":"Contribution guide","text":""},{"location":"contributing/#local-development","title":"Local development","text":"<ul> <li>The complete test suite depends on having at least the following installed   (possibly not a complete list)</li> <li>git </li> <li>python3 (at least 3.8)</li> <li>poetry</li> </ul>"},{"location":"contributing/#instruction-for-creating-a-commit","title":"Instruction for creating a commit","text":"<ol> <li>Clone the repository from your GitHub.</li> <li>Setup development environment through poetry (<code>poetry install</code>).</li> <li>Setup pre-commit hook (<code>poetry run pre-commit install</code>)</li> </ol>"},{"location":"contributing/#creating-releases","title":"Creating releases","text":"<p>The project uses commitizen for creating releases. The commitizen uses conventional commits to release new versions automatically.</p> <ul> <li>Commits of type <code>fix</code> will trigger bugfix releases, think <code>0.0.1</code> e.g. <code>fix: fix schema</code></li> <li>Commits of type <code>feat</code> will trigger feature releases, think <code>0.1.0</code> e.g. <code>feat: introduce new schema</code></li> <li>Commits with <code>BREAKING CHANGE</code> in body or footer will trigger breaking releases, think <code>1.0.0</code> <code>BREAKING CHANGE: introduce V2</code></li> </ul> <p>All other commit types will trigger no new release.</p> <p>More info for commitizen </p>"},{"location":"api-reference/schemas/client/","title":"Client","text":""},{"location":"api-reference/schemas/client/#move_ugc.schemas.client.Client","title":"Client","text":"<p>Client representation in pydantic schema.</p>"},{"location":"api-reference/schemas/client/#move_ugc.schemas.client.Client.id","title":"id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>id: str = Field(description='Unique identifier for the client', examples=['client-2c6059be-0f91-4cb8-aa1a-512cd10a66b5'], title='Client ID')\n</code></pre>"},{"location":"api-reference/schemas/client/#move_ugc.schemas.client.Client.created","title":"created  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created: str = Field(description='Date and time when the file was created. This will be in UTC.', examples=['2021-08-04T15:00:00.000Z'], title='File creation date')\n</code></pre>"},{"location":"api-reference/schemas/client/#move_ugc.schemas.client.Client.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str = Field(description='Client name associated at the time of creation', examples=['MyAwesomeCompany'], title='Client name')\n</code></pre>"},{"location":"api-reference/schemas/file/","title":"Files","text":""},{"location":"api-reference/schemas/file/#move_ugc.schemas.file.FileType","title":"FileType","text":"<p>Representation for File type in MoveUGC.</p>"},{"location":"api-reference/schemas/file/#move_ugc.schemas.file.FileType.id","title":"id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>id: str = Field(description='Unique identifier for the file', examples=['file-2c6059be-0f91-4cb8-aa1a-512cd10a66b5'], title='File ID')\n</code></pre>"},{"location":"api-reference/schemas/file/#move_ugc.schemas.file.FileType.created","title":"created  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created: datetime = Field(description='Date and time when the file was created. This will be in UTC.', examples=['2021-08-04T15:00:00.000Z'], title='File creation date')\n</code></pre>"},{"location":"api-reference/schemas/file/#move_ugc.schemas.file.FileType.type","title":"type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>type: str = Field(description='Type of the file', examples=['mp4', 'avi', 'mov'], title='File type')\n</code></pre>"},{"location":"api-reference/schemas/file/#move_ugc.schemas.file.FileType.presigned_url","title":"presigned_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>presigned_url: HttpUrl = Field(description='Presigned URL for the file', examples=['https://s3.amazonaws.com/bucket/file.mp4?AWSAccessKeyId=123&amp;Expires=123&amp;Signature=123'], title='File presigned URL', alias='presignedUrl')\n</code></pre>"},{"location":"api-reference/schemas/file/#move_ugc.schemas.file.FileType.client","title":"client  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>client: Optional[Client] = Field(description='Client associated with the file', examples=[{'id': 'client-2c6059be-0f91-4cb8-aa1a-512cd10a66b5'}], title='File client', default=None)\n</code></pre>"},{"location":"api-reference/schemas/file/#move_ugc.schemas.file.FileType.metadata","title":"metadata  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>metadata: Json[Dict[str, str]] = Field(description='Metadata associated with the file', examples=[{'key': 'value'}], title='File metadata')\n</code></pre>"},{"location":"api-reference/services/file/","title":"Files","text":""},{"location":"api-reference/services/file/#move_ugc.services.file.FileService","title":"FileService","text":"<p>Service which can be used to communicate with File type in UGC API.</p> <p>To use this service, you need to instantiate it with a valid Move UGC client.</p> <pre><code>from move_ugc import MoveUgc\nugc = MoveUgc(api_key=\"my-api-key\")\n\n# Call file service methods directly\nugc.files.retrieve(id=\"file-&lt;guid&gt;\")\n\n# Or use the file service as a mixin\nfile_service = ugc.files\nfile_service.retrieve(id=\"file-&lt;guid&gt;\")\n</code></pre>"},{"location":"api-reference/services/file/#move_ugc.services.file.FileService.create","title":"create","text":"<pre><code>create(file_type: str, expand: Optional[Expand] = None) -&gt; FileType\n</code></pre> <p>Create a file with given file type in MoveUGC.</p> <p>Parameters:</p> Name Type Description Default <code>file_type</code> <code>str</code> <p>type of file to be created. Example: <code>mp4</code>, <code>avi</code>, <code>move</code> etc.</p> required <code>expand</code> <code>Optional[Expand]</code> <p>list of fields to be expanded. Currently only <code>client</code> is supported.</p> <code>None</code> <p>Returns:</p> Type Description <code>FileType</code> <p>File instance of Pydantic model type.</p>"},{"location":"api-reference/services/file/#move_ugc.services.file.FileService.retrieve","title":"retrieve","text":"<pre><code>retrieve(id: str, expand: Optional[Expand] = None) -&gt; FileType\n</code></pre> <p>Retrieve a file with given file_id from MoveUGC.</p> <p>The unique id for file will usually be in the format: <code>file-{uuid}</code></p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>unique identifier for the file. This should typically be something like <code>file-{uuid}</code>.</p> required <code>expand</code> <code>Optional[Expand]</code> <p>list of fields to be expanded. Currently only <code>client</code> is supported.</p> <code>None</code> <p>Returns:</p> Type Description <code>FileType</code> <p>File instance of Pydantic model type.</p>"},{"location":"getting-started/usage/file/","title":"Files","text":"<p>Files are the main resource in the SDK. They are the files that you want to associate to a take and eventually generate animations from.</p>"},{"location":"getting-started/usage/file/#creating-a-file","title":"Creating a file","text":"<p>To create a file, you need to specify the type of file you want to create:</p> <p>Sample: Creating an <code>mp4</code> file.</p> <pre><code>file = ugc.files.create(file_type=\"mp4\")\n</code></pre> <p>This will return a pydantic object with the fields mentioned here.</p> <p>\ud83d\udca1 You can fetch the client in the same request by passing <code>expand=[\"client\"]</code> to either <code>ugc.files.create</code> or <code>ugc.files.retrieve</code>.</p>"},{"location":"getting-started/usage/file/#retrieving-an-existing-file","title":"Retrieving an existing file","text":"<p>To fetch an existing file from MoveUGC you can use the <code>ugc.files.retrieve</code> method:</p> <pre><code>file = ugc.files.retrieve(file_id=\"file-123-123-123-123\")\n</code></pre>"}]}